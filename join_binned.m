function join_binned(bpFiles, saveFile, varargin)
% Join a list of binned files. The joined file is organized by profile
% start time. 
%
% Arguments
% ---------
% bpFiles : struct
%     Structure generated by global search with dir. 
%     E.g. dir("folder/profile_*.mat")
% saveFile : text
%     Filename and path.  
% overwrite : bool, optional
%     Specify overwrite=true to overwrite existing joined files. Default is
%     false. 
%
% First created by Jesse Cusack (jesse.cusack@oregonstate.edu) 2023-06-04.

iP = inputParser;
iP.StructExpand = false;
validText = @(x) isstring(x) || ischar(x);
addRequired(iP, 'bpFiles', @isstruct);
addRequired(iP, 'saveFile', validText);
addParameter(iP, 'overwrite', false);
parse(iP, bpFiles, saveFile, varargin{:}); 
bpFiles = iP.Results.bpFiles;
saveFile = iP.Results.saveFile;
overwrite = iP.Results.overwrite;

if exist(saveFile, 'file') && ~overwrite
    error("%s already exists.", saveFile)
end

nFiles = length(bpFiles);
bp = load(fullfile(bpFiles(1).folder, bpFiles(1).name));

nBins = length(bp.z);
fns = fieldnames(bp);

starting_times = zeros(size(nFiles));
starting_times(1) = bp.time_start;

for idx = 2:nFiles
    filePath = fullfile(bpFiles(idx).folder, bpFiles(idx).name);
    bp = load(filePath);
    starting_times(idx) = bp.time_start;
    if ~isequal(length(bp.z), nBins)
        error("Length of z in %s not equal to that in preceeding files.", filePath)
    elseif ~isequal(fieldnames(bp), fns)
        error("Variables in %s do not match those in preceeding files.", filePath)
    end
end

% Initialise joined
ab = struct();
ab.z = bp.z;
ab.cast = 1:nFiles;

fns = fns(~strcmp(fns, 'z')); % This removes z from the list of fieldnames.

classifier = zeros(size(fns));
for idx = 1:length(fns)
    fn = fns{idx};
    if isscalar(bp.(fn))
        classifier(idx) = 0;
        ab.(fn) = NaN(1, nFiles);
        fprintf("Initialising %s\n", fn)
    elseif isvector(bp.(fn))
        classifier(idx) = 1;
        ab.(fn) = NaN(nBins, nFiles);
        fprintf("Initialising %s\n", fn)
    else
        fprintf("Variable %s is not scalar or vector and will not be joined.", fn)
        classifier = -1;
    end
end

[~, idxSort] = sort(starting_times);

kdx = 1;
for idx = idxSort
    bpFile = fullfile(bpFiles(idx).folder, bpFiles(idx).name);
    bp = load(bpFile);
    for jdx = 1:length(fns)
        fn = fns{jdx};
        if classifier(jdx) == 0
            ab.(fn)(kdx) = bp.(fn);
        elseif classifier(jdx) == 1
            ab.(fn)(:, kdx) = bp.(fn);
        end
    end
    kdx = kdx + 1;
end

fprintf("Saving to %s\n", saveFile)
save(saveFile, "-struct", "ab")

end